Help on class SavReader in savReaderWriter:

savReaderWriter.SavReader = class SavReader(header.Header)
 |  Read SPSS system files (.sav, .zsav)
 |  
 |  Parameters
 |  ---------- 
 |  savFileName : str
 |      the file name of the spss data file
 |  returnHeader : bool, default False
 |      indicates whether the first record should be a list of variable names
 |  recodeSysmisTo: (value), default None
 |      indicates to which value SPSS missing values (`$sysmis`) should be 
 |      recoded. Any value below 10 ** -10 is returned as None 
 |  verbose : bool, default False
 |      indicates whether information about the spss data file (e.g., number
 |      of cases, variable names, file size) should be printed on the screen.
 |  selectVars : list or None, default None
 |      indicates which variables in the file should be selected.
 |      The variables should be specified as a list of valid variable names.
 |      If ``None`` is specified, all the variables in the file are used
 |  idVar : str or None, default None
 |      indicates which variable in the file should be used for use as id
 |      variable for the 'get' method
 |  rawMode : bool, default False
 |      indicates whether values should get SPSS-style formatting, and whether
 |      date variables (if present) should be converted into ISO-dates. If set
 |      to ``True`` the program does not format any values, which increases 
 |      processing speed. In particular ``rawMode=True`` implies that:
 |  
 |      * SPSS datetimes will not be converted into ISO8601 dates
 |      * SPSS `N` formats will not be converted into strings with leading zeroes
 |      * SPSS `$sysmis` values will not be converted into ``None`` values
 |      * String values will be ceiled multiples of 8 bytes
 |      See also :ref:`formats` and :ref:`dateformats`
 |  ioUtf8 : bool, int, default False
 |      indicates the mode in which text communicated to or from the I/O 
 |      Module will be. 
 |  
 |      * `codepage mode`: ``ioUtf8=CODEPAGE_MODE``, or ``ioUtf8=0``, or
 |        ``ioUtf8=False``. Use the current ioLocale setting to determine the
 |        encoding for reading and writing data. Cf. `SET UNICODE=OFF`.
 |      * `standard unicode mode`: ``ioUtf8=UNICODE_UMODE``, or ``ioUtf8=1``,
 |        or ``ioUtf8=True``. Use Unicode encoding (UTF-8) for reading and 
 |        writing data. Data are returned as ``unicode`` strings. 
 |        Cf. `SET UNICODE=ON`.
 |      * `bytes unicode mode`: ``ioUtf8=UNICODE_BMODE``, or ``ioUtf8=2``.
 |        Like standard unicode mode, but data are returned as ``byte``
 |        strings.
 |      See also under :py:meth:`savReaderWriter.Generic.ioUtf8` and under
 |      ``ioUtf8`` in :py:class:`savReaderWriter.SavWriter`.
 |  
 |      .. versionchanged:: 3.4
 |          ``ioUtf8=UNICODE_BMODE`` was added.
 |  
 |  ioLocale : str or None, default None
 |      indicates the locale of the I/O module. Cf. `SET LOCALE` (default
 |      = ``None``, which corresponds to 
 |      ``locale.setlocale(locale.LC_CTYPE)``, for example: 
 |      ``en_US.UTF-8`` (Unix) or ``english`` (Windows).
 |      See also under :py:meth:`savReaderWriter.Generic.ioLocale`. 
 |  
 |  Examples
 |  --------
 |  Typical use:
 |  
 |  .. code-block:: python
 |  
 |      with SavReader('somefile.sav', returnHeader=True) as reader:
 |          header = reader.next()
 |          for line in reader:
 |              process(line)
 |  
 |  Method resolution order:
 |      SavReader
 |      header.Header
 |      generic.Generic
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __bytes__(self)
 |      This function returns a conscise file report of the spss data file
 |      For example::
 |          data = SavReader(savFileName)
 |          print(str(data))  # Python 3: bytes(data)
 |          data.close()
 |  
 |  __cmp__(self, other)
 |      This function implements behavior for all of the comparison
 |      operators so comparisons can be made between SavReader instances,
 |      or comparisons between SavReader instances and integers.
 |  
 |  __contains__(self, item)
 |      This function implements membership testing and returns True if
 |      <idVar> contains <item>. Thus, it requires the 'idVar' parameter to
 |      be set.
 |      Example::
 |      
 |          reader = SavReader(savFileName, idVar="ssn")
 |          "987654321" in reader # returns True or False
 |  
 |  __enter__(self)
 |      This function opens the spss data file (context manager).
 |  
 |  __eq__(self, other)
 |  
 |  __exit__(self, type, value, tb)
 |      This function closes the spss data file and does some cleaning.
 |      
 |      .. warning::
 |      
 |          Always ensure the the .sav file is properly closed, either by
 |          using a context manager (``with`` statement) or by using 
 |          ``close()``
 |  
 |  __ge__(self, other)
 |  
 |  __getitem__(self, key)
 |      x.__getitem__(y) <==> x[y], where y may be int or slice.
 |      This function reports the record of case number <key>.
 |      The <key> argument may also be a slice, for example::
 |          
 |          data = SavReader("someFile.sav") 
 |          print("The first six records look like this: %s" % data[:6])
 |          print("The first record looks like this: %s" % data[0])
 |          print("First column: %s" % data[..., 0]) # requires numpy
 |          print("Row 4 & 5, first three cols: %s" % data[4:6, :3])
 |          data.close()
 |  
 |  __gt__(self, other)
 |  
 |  __hash__(self)
 |      This function returns a hash value for the object to ensure it
 |      is hashable.
 |  
 |  __init__(self, savFileName, returnHeader=False, recodeSysmisTo=None, verbose=False, selectVars=None, idVar=None, rawMode=False, ioUtf8=False, ioLocale=None)
 |      Constructor. Initializes all vars that can be recycled
 |  
 |  __iter__(self)
 |      x.__iter__() <==> iter(x). Yields records as a list. 
 |      For example::
 |      
 |          with SavReader("someFile.sav") as reader:
 |              for line in reader:
 |                  process(line)
 |  
 |  __le__(self, other)
 |  
 |  __len__(self)
 |      This function reports the number of cases (rows) in the spss data
 |      file. For example: len(SavReader(savFileName))
 |  
 |  __lt__(self, other)
 |  
 |  __ne__(self, other)
 |  
 |  __next__(self)
 |      reader.next() -> the next value, or raise StopIteration
 |  
 |  __str__(self)
 |      This function returns a conscise file report of the spss data file.
 |      For example::
 |          data = SavReader(savFileName)
 |          print(unicode(data))  # Python 3: str(data)
 |          data.close()
 |  
 |  __unicode__ = __str__(self)
 |  
 |  all(self, asNamedtuple=True)
 |      This convenience function returns all the records.
 |      
 |      Parameters
 |      ----------
 |      asNamedtuple : bool, default True
 |         whether a record should be a namedtuple, using varNames
 |         as the fieldnames
 |      
 |      Returns
 |      -------
 |      records : list of namedtuples or list of lists
 |      
 |      Example::
 |      
 |          data = SavReader("someFile.sav")
 |          list_of_lists = data.all(False)
 |          data.close()
 |  
 |  close(self)
 |      This function closes the spss data file and does some cleaning.
 |  
 |  decode(func)
 |      Decorator to decode datestrings for ioUtf8
 |  
 |  formatValues(self, record)
 |      This function formats date fields to ISO dates (yyyy-mm-dd), plus
 |      some other date/time formats. The SPSS N format is formatted to a
 |      character value with leading zeroes. System missing values are recoded
 |      to <recodeSysmisTo>, which defaults to `None`. If rawMode==True, 
 |      this function does nothing
 |  
 |  get(self, key, default=None, full=False)
 |      This function returns the records for which <idVar> == <key>
 |      if <key> in <savFileName>, else <default>. Thus, the function mimics
 |      dict.get, but note that dict[key] is NOT implemented. NB: Even though
 |      this uses a binary search, this is not very fast on large data (esp.
 |      the first call, and with full=True)
 |      
 |      Parameters
 |      ----------
 |      key : str, int, float
 |          key for which the corresponding record should be returned
 |      default : (value)
 |          value that should be returned if <key> is not found
 |      full : bool
 |          value that indicates whether *all* records for which
 |          <idVar> == <key> should be returned
 |      
 |      Examples
 |      --------
 |      For example::
 |      
 |          data = SavReader(savFileName, idVar="ssn")
 |          data.get("987654321", "social security number not found!")
 |          data.close()
 |  
 |  getFileReport(self)
 |      This function prints a report about basic file characteristics
 |  
 |  getHeader(self, selectVars)
 |      This function returns the variable names, or a selection thereof
 |      (as specified as a list using the selectVars parameter), as a list.
 |  
 |  getSavFileInfo(self)
 |      This function reads and returns some basic information of the open
 |      spss data file.
 |  
 |  head(self, n=5)
 |      This convenience function returns the first <n> records.
 |      Example::
 |      
 |          data = SavReader("someFile.sav") 
 |          print("The first five records look like this: %s" % data.head())
 |          data.close()
 |  
 |  next(self)
 |      reader.next() -> the next value, or raise StopIteration
 |  
 |  spss2strDate(self, spssDateValue, fmt, recodeSysmisTo)
 |      This function converts internal SPSS dates (number of seconds
 |      since midnight, Oct 14, 1582 (the beginning of the Gregorian calendar))
 |      to a human-readable format (ISO-8601 where possible)
 |      
 |      Parameters
 |      ----------
 |      spssDateValue : int, float
 |      fmt : strptime format
 |      recodeSysmisTo : what SPSS $sysmis values will be replaced with
 |      
 |      Examples
 |      --------
 |      For example::
 |      
 |          data = SavReader(savFileName)
 |          iso_date = data.spss2strDate(11654150400.0, "%Y-%m-%d", None)
 |          data.close()
 |      
 |      See also
 |      --------
 |      savReaderWriter.SavReaderNp.spss2datetimeDate : returns 
 |          ``datetime.datetime`` object
 |      strptime-formats-settings
 |          :download:`__init__.py <../__init__.py>` to change the 
 |          strptime formats from ISO into something else. Note that dates 
 |          before 1900 are *not* affected by format changes in `__init__.py`.
 |      
 |      :ref:`dateformats` : overview of SPSS datetime formats
 |  
 |  tail(self, n=5)
 |      This convenience function returns the last <n> records.
 |      Example::
 |      
 |          data = SavReader("someFile.sav") 
 |          print("The last four records look like this: %s" % data.tail(4))
 |          data.close()
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  shape
 |      This function returns the number of rows (nrows) and columns
 |      (ncols) as a namedtuple. For example::
 |          data = SavReader(savFileName)
 |          data.shape.nrows == len(data) # True
 |          data.close()
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from header.Header:
 |  
 |  encode(self, item)
 |      Counter part of decode helper function, does the opposite of that
 |      function (but is not a decorator)
 |  
 |  freeMemory(self, funcName, *args)
 |      Clean up: free memory claimed by e.g. getValueLabels and
 |      getVarNamesTypes
 |  
 |  openSavFile(self)
 |      This function returns the file handle that was opened in the
 |      super class
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from header.Header:
 |  
 |  alignments
 |      Get/Set `VARIABLE ALIGNMENT`. Returns/Takes a dictionary of the 
 |       form `{varName: alignment}`. Valid alignment values are: "left",
 |       "right", "center".
 |      
 |      .. warning:: *measureLevels, columnWidths, alignments must all three 
 |          be set, if used*
 |  
 |  caseWeightVar
 |      Get/Set WEIGHT variable.
 |      Takes a valid varName, and returns weight variable, if any, as a
 |      string.
 |  
 |  columnWidths
 |      Get/Set `VARIABLE WIDTH` (display width).
 |      Returns/Takes a dictionary of the form `{varName: <int>}`. A value of
 |      zero is special and means that the IBM SPSS Statistics Data Editor
 |      is to set an appropriate width using its own algorithm. If used,
 |      variable alignment, measurement level and column width all needs to
 |      be set.
 |  
 |  dataEntryInfo
 |      Get/Set information that is private to the Data Entry for Windows (DEW)
 |      product. Returns/takes a dictionary of the form:
 |      dataEntryInfo = {"data": [<list_of_dew_segments>], "GUID": <guid>},
 |      where GUID stands for 'globally unique identifier'. 
 |      Some remarks:
 |      -A difference in the byte order of the host system and the foreign host
 |       will result in an error. Therefore, an optional 'swapBytes' key may 
 |       be specified whose value indicates whether the bytes should be swapped 
 |       (True) or not (False). Default is that the byte order of the host system
 |       is retained.
 |      -DEW information is not copied when using mode="cp" in the SavWriter
 |       initializer
 |      -THIS IS ENTIRELY UNTESTED!
 |  
 |  dateVariables
 |      Get/Set `DATE` information. This function reports the Forecasting
 |      (Trends) date variable information, if any, in IBM SPSS Statistics
 |      data files. Entirely untested and not implemented in reader/writer
 |  
 |  fileAttributes
 |      Get/Set `DATAFILE ATTRIBUTES`.
 |      Returns/Takes a dictionary of the form:
 |      
 |      .. code-block:: python
 |      
 |          b'attrName[1]': b'attrValue1', 
 |          b'revision[1]': b'2010-10-09',
 |          b'revision[2]': b'2010-10-22', 
 |          b'revision[3]': b'2010-11-19'}
 |      
 |      Square brackets indicate attribute arrays, which must
 |      start with 1
 |  
 |  fileLabel
 |      Get/Set `FILE LABEL` (id string)
 |      Takes a file label, and returns file label, if any, as
 |      a byte string.
 |  
 |  formats
 |      Get the `PRINT FORMATS`, set `PRINT FORMATS` and `WRITE FORMATS`.
 |      Returns/takes a dictionary of the form `{varName: <spss-format>}`.
 |      For example:
 |      
 |      .. code-block:: python
 |      
 |          {b'salary': b'DOLLAR8', 
 |           b'gender': b'A1',
 |           b'educ': b'F8.2'}
 |  
 |  measureLevels
 |      Get/Set `VARIABLE LEVEL` (measurement level).
 |      Returns/Takes a dictionary of the form `{varName: varMeasureLevel}`.
 |      Valid measurement levels are: "unknown", "nominal", "ordinal", "scale",
 |      "ratio", "flag", "typeless". This is used in SPSS procedures such as
 |      `CTABLES`.
 |  
 |  missingValues
 |      Get/Set MISSING VALUES.
 |      User missing values are values that will not be included in
 |      calculations by SPSS. For example, 'don't know' might be coded as a
 |      user missing value (a value of 999 is typically used, so when vairable
 |      'age' has values 5, 15, 999, the average age is 10). This is
 |      different from 'system missing values', which are blank/null values.
 |      Takes a dictionary of the following form:
 |      
 |      .. code-block:: python
 |      
 |          # note that 'lower', 'upper', 'value(s)' are without b' prefix
 |          missingValues = { 
 |      
 |          # discrete values
 |          b"someNumvar1": {"values": [999, -1, -2]},
 |      
 |          # range, cf. MISSING VALUES x (-9 THRU -1)
 |          b"someNumvar2": {"lower": -9, "upper": -1},
 |          b"someNumvar3": {"lower": -9, "upper": -1, "value": 999},
 |      
 |          # string variables can have up to three missing values
 |          b"someStrvar1": {"values": [b"foo", b"bar", b"baz"]},
 |          b"someStrvar2": {"values': b"bletch"}
 |          }
 |  
 |  multRespDefs
 |      Get/Set `MRSETS` (multiple response) sets.
 |      Returns/takes a dictionary of the form:
 |      
 |      * multiple category sets: `{setName: {"setType": "C", "label": lbl,
 |        "varNames": [<list_of_varNames>]}}`
 |      * multiple dichotomy sets: `{setName: {"setType": "D", "label": lbl,
 |        "varNames": [<list_of_varNames>], "countedValue": countedValue}}`
 |      * extended multiple dichotomy sets: `{setName: {"setType": "E",
 |        "label": lbl, "varNames": [<list_of_varNames>], "countedValue":
 |        countedValue, 'firstVarIsLabel': <bool>}}`
 |      Note. You can get values of extended multiple dichotomy sets with 
 |      getMultRespSetsDefEx, but you cannot write extended multiple dichotomy
 |      sets.
 |      
 |      For example:
 |      
 |      .. code-block:: python
 |      
 |          categorical =  {b"setType": b"C", 
 |                          b"label": b"labelC",
 |                          b"varNames": [b"salary", b"educ"]}
 |          dichotomous1 = {b"setType": b"D", b"label": b"labelD",
 |                          b"varNames": [b"salary", b"educ"], 
 |                          b"countedValue": b"Yes"}
 |          dichotomous2 = {b"setType": b"D", 
 |                          b"label": b"", 
 |                          b"varNames": [b"salary", b"educ", b"jobcat"], 
 |                          b"countedValue": b"No"}
 |          extended1 =    {b"setType": b"E", 
 |                          b"label": b"", 
 |                          b"varNames": [b"mevar1", b"mevar2", b"mevar3"], 
 |                          b"countedValue": b"1",
 |                          b"firstVarIsLabel": True}
 |          extended2 =    {b"setType": b"E", 
 |                          b"label": b"Enhanced set with user specified label", 
 |                          b"varNames": [b"mevar4", b"mevar5", b"mevar6"], 
 |                          b"countedValue": b"Yes", 
 |                          b"firstVarIsLabel": False}
 |          multRespDefs = {b"testSetC": categorical, 
 |                          b"testSetD1": dichotomous1,
 |                          b"testSetD2": dichotomous2, 
 |                          b"testSetEx1": extended1,
 |                          b"testSetEx2": extended2}
 |  
 |  numberofCases
 |      This function reports the number of cases present in a data file.
 |      Prehistoric files (< SPSS v6.0) don't contain nCases info, therefore
 |      a guesstimate of the number of cases is given for those files 
 |      (cf. `SHOW N`)
 |      
 |      See also
 |      --------
 |      savReaderWriter.SavReader.__len__ : use `len(reader)` to get the 
 |          number of cases
 |      savReaderWriter.SavReader.shape : use `reader.shape` to get a 
 |          (nrows, ncols) ntuple
 |  
 |  numberofVariables
 |      This function returns the number of variables (columns) in the
 |      spss dataset
 |      
 |      See also
 |      --------
 |      savReaderWriter.SavReader.shape : use `reader.shape` to get a 
 |          (nrows, ncols) ntuple
 |  
 |  queryType7
 |      This function can be used to determine whether a file opened for reading
 |      or append contains a specific "type 7" record. Returns a dictionary of the
 |      form: `{subtype_number: (subtype_label, present_or_not)}`, where
 |      present_or_not is a bool
 |  
 |  textInfo
 |      Get/Set text information.
 |      Takes a savFileName and returns a string of the form: "File %r built
 |      using SavReaderWriter.py version %s (%s)". This is akin to, but
 |      *not* equivalent to the SPSS syntax command `DISPLAY DOCUMENTS`
 |  
 |  valueLabels
 |      Get/Set `VALUE LABELS`. Takes a dictionary of the form 
 |      `{varName: {value: valueLabel}}`:
 |      
 |      .. code-block:: python
 |      
 |          {b'numGender': {1: b'female', 
 |                         {2: b'male'},
 |           b'strGender': {b'f': b'female', 
 |                          b'm': b'male'}}
 |  
 |  varAttributes
 |      Get/Set `VARIABLE ATTRIBUTES`.
 |      Returns/Takes dictionary of the form:
 |      
 |      .. code-block:: python
 |      
 |          {b'var1': {b'attr name x': b'attr value x',
 |                     b'attr name y': b'attr value y'},
 |           b'var2': {b'attr name a': b'attr value a',
 |                     b'attr name b': b'attr value b'}}
 |  
 |  varLabels
 |      Get/set `VARIABLE LABELS`.
 |      Returns/takes a dictionary of the form `{varName: varLabel}`. 
 |      For example:
 |      
 |      .. code-block:: python
 |      
 |          {b'salary': b'Salary (dollars)',
 |           b'educ': b'Educational level (years)'}
 |  
 |  varNamesTypes
 |      Get/Set a tuple of variable names and types
 |      
 |      * Variable names is a list of the form `[b'var1', b'var2', b'etc']`
 |      * Variable types is a dictionary of the form `{varName: varType}`
 |      
 |      The variable type code is an integer in the range 0-32767, 0
 |      indicating a numeric variable (e.g., `F8.2`) and a positive value
 |      indicating a string variable of that size (in bytes).
 |  
 |  varRoles
 |      Get/Set `VARIABLE ROLES`.
 |      Returns/Takes a dictionary of the form `{varName: varRole}`, where
 |      varRoles may be any of the following: 'both', 'frequency', 'input',
 |      'none', 'partition', 'record ID', 'split', 'target'
 |  
 |  varSets
 |      Get/Set `VARIABLE SET` information.
 |      Returns/Takes a dictionary with setname as keys and a list of SPSS
 |      variables as values. For example:
 |      
 |      .. code-block:: python
 |      
 |          {b'SALARY': [b'salbegin', b'salary'], 
 |           b'DEMOGR': [b'gender', b'minority', b'educ']}
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from generic.Generic:
 |  
 |  closeSavFile(self, fh, mode=b'rb')
 |      This function closes the .sav file associated with <fh> that was
 |      open in mode <mode>.
 |  
 |  getCaseBuffer(self)
 |      This function returns a buffer and a pointer to that buffer. A whole
 |      case will be read into this buffer.
 |  
 |  getStruct(self, varTypes, varNames, mode=b'rb')
 |      This function returns a compiled struct object. The required
 |      struct format string for the conversion between C and Python
 |      is created on the basis of varType and byte order.
 |      --varTypes: SPSS data files have either 8-byte doubles/floats or n-byte
 |        chars[]/ strings, where n is always 8 bytes or a multiple thereof.
 |      --byte order: files are written in the byte order of the host system
 |        (mode="wb") and read/appended using the byte order information
 |        contained in the SPSS data file (mode is "ab" or "rb" or "cp")
 |  
 |  isCompatibleEncoding(self)
 |      This function determines whether the file and interface encoding
 |      are compatible.
 |  
 |  loadLibrary(self)
 |      This function loads and returns the SPSSIO libraries,
 |      depending on the platform.
 |  
 |  wideCharToMultiByte(self, fn)
 |      Maps a wide character string to a new character filename string. 
 |      The new character string is not necessarily from a multibyte character set. 
 |      
 |      See also
 |      --------
 |      MSDN `http://msdn.microsoft.com/en-us/library/windows/desktop/dd374130`_
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from generic.Generic:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  byteorder
 |      This function returns the byte order of the open file as a string.
 |      It returns either 'little' or 'big'.
 |  
 |  encoding
 |      This function is similar to `fileEncoding`, but it tries to guess 
 |      the encoding if this information is not present in the file header
 |      (ie., in files created with SPSS v14 or earlier). If this is the case,
 |      and the file was created under Windows, the Windows codepage associated
 |      with the current locale is returned. If the current locale does not 
 |      have a codepage (e.g., Georgian, Armenian), or if the file was created 
 |      on another OS, `locale.getpreferredencoding()` is returned.
 |      
 |      Returns
 |      -------
 |      encoding : bytestring
 |          The encoding applicable to the file
 |  
 |  fileCodePage
 |      This function provides the Windows code page number of the encoding
 |      applicable to a file.
 |      
 |      Returns
 |      -------
 |      codepage : int or None
 |          Windows code page number of the encoding applicable to the file
 |          If no encoding information is present (file was created with 
 |          SPSS v14 or older), None is returned
 |  
 |  fileCompression
 |      Get/Set the file compression.
 |      Returns/Takes a compression switch which may be any of the following:
 |      'uncompressed', 'standard', or 'zlib'. Zlib comression requires SPSS
 |      v21 I/O files.
 |  
 |  fileEncoding
 |      This function obtains the encoding applicable to a file.
 |      The encoding is returned as an IANA encoding name, such as
 |      ISO-8859-1, which is then converted to the corresponding Python
 |      codec name. If the file contains no file encoding, the locale's
 |      preferred encoding is returned
 |      
 |      Returns
 |      -------
 |      encoding : bytestring or None
 |          The encoding applicable to the file. If no encoding information 
 |          is present (SPSS v14 or older), None is returned
 |      
 |      See also
 |      --------
 |      savReaderWriter.Generic.encoding : similar, but tries to guess 
 |          the encoding when it is not present in the header
 |  
 |  ioLocale
 |      This function gets/sets the I/O Module's locale.
 |      This corresponds with the SPSS command `SET LOCALE`. The I/O Module's
 |      locale is separate from that of the client application. The
 |      <localeName> parameter and the return value are identical to those
 |      for the C run-time function setlocale. The exact locale name
 |      specification depends on the OS of the host sytem, but has the
 |      following form::
 |      
 |          <lang>_<territory>.<codeset>[@<modifiers>]
 |      
 |      The 'codeset' and 'modifier' components are optional and in Windows,
 |      aliases (e.g. 'english') may be used. When the I/O Module is first
 |      loaded, its locale is set to the system default. 
 |      
 |      See also
 |      --------
 |      linux : `<https://wiki.archlinux.org/index.php/Locale>`_ 
 |      windows : `<http://msdn.microsoft.com/en-us/library/39cwe7zf(v=vs.80).aspx>`_
 |  
 |  ioUtf8
 |      This function returns/sets the current interface encoding
 |      
 |      * ``ioUtf8 = False`` --> `CODEPAGE` mode,
 |      * ``ioUtf8 = True`` --> UTF-8 mode, aka. `UNICODE` mode
 |      This corresponds with the SPSS command `SHOW UNICODE` (getter)
 |      and `SET UNICODE=ON/OFF` (setter).
 |      
 |      See also
 |      --------
 |      SPSS-unicode-mode : `<http://www-01.ibm.com/support/knowledgecenter/SSLVMB_21.0.0/com.ibm.spss.statistics.help/faq_unicode.htm>`_
 |  
 |  missingValuesLowHigh
 |      This function returns the 'lowest' and 'highest' values used for
 |      numeric missing value ranges on the host system. This can be used in
 |      a similar way as the LO and HI keywords in missing values
 |      specifications (cf. `MISSING VALUES foo (LO THRU 0)`. It may be called
 |      at any time.
 |  
 |  record
 |      Get/Set a whole record from/to a pre-allocated buffer
 |  
 |  releaseInfo
 |      This function reports release- and machine-specific information
 |      about the open file.
 |  
 |  spssVersion
 |      Return the SPSS version that was used to create the opened file
 |      as a three-tuple indicating major, minor, and fixpack version asunde
 |      ints. NB: in the transition from SPSS to IBM, a new four-digit
 |      versioning nomenclature is used. This function returns the old
 |      three-digit nomenclature. Therefore, no patch version information
 |      is available.
 |  
 |  spssioVersion
 |      This function returns the version of the IBM SPSS I/O libraries
 |      as a named tuple with the fields major, minor, patch, fixpack.
 |      May also be inspected by passing an empty savFileName, as in:
 |      savReaderWriter.Generic("").spssioVersion
 |  
 |  sysmis
 |      This function returns the IBM SPSS Statistics system-missing
 |      value (`$SYSMIS`) for the host system (also called 'NA' in other
 |      systems).
 |  
 |  systemString
 |      This function returns the name of the system under which the file
 |      was created aa a string.

